// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  password      String
  collections   Collection[]
  favoriteCoins Coin[]       @relation("CoinUserFavorite")

  @@map("users")
}

model NameCollection {
  id    Int    @id @default(autoincrement())
  name  String @unique
  coins Coin[]
}

model Collection {
  coinId    String
  userId    String
  count     Int
  user      User      @relation(fields: [userId], references: [id])
  coin      Coin      @relation(fields: [coinId], references: [id])
  condition Condition @default(G)

  @@unique([coinId, userId, condition])
  @@map("collections")
}

model Coin {
  id               String          @id @default(uuid())
  name             String
  denomination     Float
  year             Int
  currencyId       String
  currency         Currency        @relation(fields: [currencyId], references: [code])
  url              String          @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now())
  description      String
  countryId        String
  country          Country         @relation(fields: [countryId], references: [code])
  current          Boolean
  prices           Price[]
  mintId           Int?
  mint             Mint?           @relation(fields: [mintId], references: [id])
  collections      Collection[]
  NameCollection   NameCollection? @relation(fields: [nameCollectionId], references: [id])
  nameCollectionId Int?
  favorites        User[]          @relation("CoinUserFavorite")

  @@map(name: "coins")
}

model Country {
  name      String
  alfaCode2 String @unique
  alfaCode3 String @unique
  code      String @id
  iso       String @unique
  coins     Coin[]
  mints     Mint[]

  @@map(name: "countries")
}

model Price {
  id         String    @id @default(uuid())
  price      Float
  coinId     String
  coin       Coin      @relation(fields: [coinId], references: [id])
  condition  Condition @default(UNC)
  currencyId String
  currency   Currency  @relation(fields: [currencyId], references: [code])

  @@unique([coinId, condition, currencyId], name: "Price_coinId_condition_currencyId_key")
  @@map(name: "prices")
}

model Currency {
  code           String  @id
  name           String  @unique
  alphabeticCode String
  prices         Price[]
  coins          Coin[]

  @@map(name: "currencies")
}

model Mint {
  id        Int     @id @default(autoincrement())
  name      String
  shortName String
  country   Country @relation(fields: [countryId], references: [code])
  countryId String
  coints    Coin[]

  @@map(name: "mints")
}

enum Condition {
  G
  VG
  F
  VF
  XF
  UNC
  PROOF

  @@map(name: "conditions")
}
