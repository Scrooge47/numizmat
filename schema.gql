# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input ArrayCode {
  in: [String!]!
}

input ArrayNumber {
  in: [Float!]!
}

type Coin {
  NameCollectionId: Float!
  circulation: Int!
  count: Int!
  country: Country!
  createdAt: DateTime!
  currency: Currency!
  current: Boolean!
  denomination: Float!
  description: String!
  favorite: Boolean!
  id: String!
  mint: Mint!
  name: String!
  nameCollection: NameCollection!
  prices: [Price!]!
  publicId: String!
  updatedAt: DateTime!
  url: String!
  year: Int!
}

input CoinFilter {
  coin: Filters
}

input CoinWhereUniqueInput {
  id: String!
}

type Collection {
  coin: Coin!
  coinId: String!
  condition: Condition!
  count: Float!
  user: User!
  userId: String!
}

enum Condition {
  F
  G
  PROOF
  UNC
  VF
  VG
  XF
}

type Country {
  alfaCode2: String!
  alfaCode3: String!
  code: String!
  iso: String!
  name: String!
}

input CountryWhereCodeInput {
  code: ArrayCode
  name: includeFilter
}

input CountryWhereUniqueInput {
  code: String!
}

type Currency {
  alphabeticCode: String!
  code: String!
  name: String!
}

input CurrencyWhereUniqueInput {
  code: String
  id: ID
}

type DataUserCollection {
  nameCollection: NameCollection!
  numberCoinOfUser: Float!
  totalCoin: Float!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Edge {
  cursor: String!
  node: Coin!
}

input Filters {
  AND: [Filters!]
  NameCollection: NameCollectionWhereIdInput
  OR: [Filters!]
  country: CountryWhereCodeInput
  name: includeFilter
}

type ImageSignature {
  signature: String!
  timestamp: Int!
}

input InputCurrency {
  alphabeticCode: String!
  code: String!
  name: String!
}

input InputMint {
  country: NestedCountyCreateInput!
  name: String!
  shortName: String!
}

input InputNameCollection {
  name: String!
}

type Mint {
  country: Country!
  id: Float!
  name: String!
  shortName: String!
}

input MintWhereUniqueInput {
  id: Float
}

type Mutation {
  addCoinToCollection(input: newCollectionInput!): Collection!
  addPrice(input: newPriceInput!): Price!
  createCoin(input: NewCoinInput!): Coin!
  createCountry(input: NewCountryInput!): Country!
  createCurrency(input: InputCurrency!): Currency!
  createImageSignature: ImageSignature!
  createMint(input: InputMint!): Mint!
  createNameCollection(input: InputNameCollection!): NameCollection!
  createUser(input: NewUserInput!): User!
  favoriteCoin(input: favoriteCoinInput!): Coin!
}

type NameCollection {
  coins: [Coin!]!
  countCoins: Float!
  id: ID!
  name: String!
}

input NameCollectionWhereIdInput {
  id: ArrayNumber!
}

input NestedCoinCreateInput {
  connect: CoinWhereUniqueInput!
}

input NestedCountyCreateInput {
  connect: CountryWhereUniqueInput!
}

input NestedCurrencyCreateInput {
  connect: CurrencyWhereUniqueInput!
}

input NestedMintCreateInput {
  connect: MintWhereUniqueInput!
}

input NewCoinInput {
  circulation: Int!
  country: NestedCountyCreateInput!
  currency: NestedCurrencyCreateInput!
  current: Boolean!
  denomination: Float!
  description: String!
  mint: NestedMintCreateInput!
  name: String!
  url: String!
  year: Int!
}

input NewCountryInput {
  alfaCode2: String!
  alfaCode3: String!
  code: String!
  iso: String!
  name: String!
}

input NewUserInput {
  confirmPassword: String!
  email: String!
  password: String!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
}

type PreparedFilter {
  country: [PreparedOneElemFilter!]
  nameCollection: [PreparedOneElemFilter!]
}

type PreparedOneElemFilter {
  id: Float!
  name: String!
}

type Price {
  coin: Coin!
  coinId: String!
  condition: Condition!
  count: Float!
  currency: Currency!
  currencyId: String!
  id: String!
  price: Float!
}

type Query {
  coin(id: String!): Coin!
  collectionOfUser(filters: CoinFilter): [Collection!]!
  countries: [Country!]!
  country(code: String!): Country!
  currencies: [Currency!]!
  getCoins(filters: RequestCoin!): Response!
  getFavoriteCoin: [Coin!]!
  getFiltersFromCoins: PreparedFilter!
  getFiltersFromCoinsOfUser: PreparedFilter!
  getMints(country: String!): [Mint!]!
  mints: [Mint!]!
  nameCollections: [NameCollection!]!
  prices: [Price!]!
  searchCountry(search: String!): [Country!]!
  user(id: String!): User!
  userInfoCoin: [DataUserCollection!]!
}

input RequestCoin {
  after: String
  filter: Filters!
  first: Float!
}

type Response {
  edges: [Edge!]!
  pageInfo: PageInfo!
}

type User {
  email: String!
  id: String!
  password: String!
}

input favoriteCoinInput {
  favoriteState: Boolean!
  id: String!
}

input includeFilter {
  contains: String
  mode: String
}

input newCollectionInput {
  coin: NestedCoinCreateInput!
  condition: Condition!
  count: Int!
}

input newPriceInput {
  coinId: String!
  condition: Condition!
  currencyId: String!
  price: Float!
}
